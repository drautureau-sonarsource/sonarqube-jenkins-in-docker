node() {
  stage('checkout') {
    checkout scm
  }
  stage('Analyse') {
    withSonarQubeEnv {
      withMaven {
        dir('Analyse-with-Maven') {
          sh "mvn -B $env.SONAR_MAVEN_GOAL"
        }
      }
    }
  }
}

stage("Quality Gate") {
  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}

def withMaven(def body) {
  def javaHome = tool name: 'Java 8', type: 'hudson.model.JDK'
  def mvnHome = tool name: 'Maven 3.3.x', type: 'hudson.tasks.Maven$MavenInstallation'
  withEnv(["JAVA_HOME=${javaHome}", "PATH+MAVEN=${mvnHome}/bin"]) {
    body.call()
  }
}
